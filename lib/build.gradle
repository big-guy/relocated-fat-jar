/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

group = "com.example"
version = "1.0"

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.0.1-jre'
}

task fatJar(type: Jar) {
    // TODO: May need filtering
    // TODO: from {} is ugly and error prone
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.files.collect {zipTree(it) }
    }
    // TODO: Need to know where the "main" jar's inputs come from
    from(sourceSets.main.output)

    // TODO: Name is derived from other properties not listed here
    // TODO: artifact metadata is derived from task configuration sometimes
    archiveClassifier = "fat"

    // TODO: how do we handle duplicates in fat jars
    duplicatesStrategy = DuplicatesStrategy.WARN
}

// TODO: Why do we need to do this for assemble to build fatJar
artifacts {
    archives fatJar
}

configurations {
    // TODO: Would be nice to have a way to create a consumable configuration without twiddling canBeConsumed
    fatRuntimeElements {
        canBeConsumed = true
        canBeResolved = false

        // TODO: How do we know what attributes to put here?
        attributes {fatJarAttributes ->
            def runtimeAttributes = runtimeElements.attributes
            runtimeAttributes.keySet().each {
                fatJarAttributes.attribute(it, runtimeAttributes.getAttribute(it))
            }
            // Verbose-ish
            fatJarAttributes.attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EMBEDDED))
        }

        outgoing {
            // What does this capability need to be? how do we keep this in sync with the project coords?
            capability("com.example:lib:1.0")
            // TODO: How do we derive capabilities from runtimeClasspath that goes into the fat jar?
            capability("org.apache.commons:commons-math3:3.6.1")
            capability("com.google.guava:guava:31.0.1-jre")
            capability("com.google.guava:failureaccess:1.0.1")
            capability("com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava")
            capability("com.google.code.findbugs:jsr305:3.0.2")
            capability("org.checkerframework:checker-qual:3.12.0")
            capability("com.google.errorprone:error_prone_annotations:2.7.1")
            capability("com.google.j2objc:j2objc-annotations:1.3")

            //
            artifact fatJar
        }
    }
}

// TODO: WTF
components.java.addVariantsFromConfiguration(configurations.fatRuntimeElements) {
    // TODO: This actually depends on knowing whether or not the fat jar is the primary/only Maven jar published
    mapToOptional()
    // TODO: Why not mapToDevNull()?
}

publishing {
    publications {
        maven(MavenPublication) {
            // Magic component
            // TODO: from() here is inconsistent with other from() that allow multiple values
            // calling from() multiple times throws an exception
            // publishedComponent = components.java
            from(components.java)
            // TODO: Error message is bad.
            /*
Maven publication 'maven' pom metadata warnings (silence with 'suppressPomMetadataWarningsFor(variant)'):
  - Variant fatRuntimeElements:
      - Declares capability com.google.errorprone:error_prone_annotations:2.7.1 which cannot be mapped to Maven
      - Declares capability com.google.j2objc:j2objc-annotations:1.3 which cannot be mapped to Maven
      - Declares capability com.google.guava:guava:31.0.1-jre which cannot be mapped to Maven
      - Declares capability com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava which cannot be mapped to Maven
      - Declares capability com.google.code.findbugs:jsr305:3.0.2 which cannot be mapped to Maven
      - Declares capability org.apache.commons:commons-math3:3.6.1 which cannot be mapped to Maven
      - Declares capability org.checkerframework:checker-qual:3.12.0 which cannot be mapped to Maven
      - Declares capability com.google.guava:failureaccess:1.0.1 which cannot be mapped to Maven
These issues indicate information that is lost in the published 'pom' metadata file, which may be an issue if the published library is consumed by an old Gradle version or Apache Maven.
The 'module' metadata file, which is used by Gradle 6+ is not affected.
             */
            suppressPomMetadataWarningsFor('fatRuntimeElements')
            // TODO: This shouldn't be logged at lifecycle
            // TODO: Maybe suppressPomMetadataWarnings()
            // TODO: Maybe suppressPomMetadataWarnings(EXTRA_CAPABILITY)
            // TODO: Should we have a publishing diagnostic task that shows these warnings and what would be published?
        }
    }
    repositories {
        maven {
            // TODO: This should use ProjectLayout
            url = uri("${buildDir}/publishing-repository")
        }
    }
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.8.2')
        }
    }
}
